#!/usr/local/bin/php
<?php
declare(strict_types=1);

function getDificculty(array $option): string {
        switch ($option[1]) {
            case '--easy':
                return "easy";
                break;
            case '--normal':
                return  "normal";
                break;
            case '--hard':
                return "hard";
                break;
            case '--help':
                return "help";
                break;
            default:
                exit("無効なオプションです。\nスクリプトを終了します。");
        }
}

function printHelpMessage() {
    print("=============================================================\n");
    print("実行方法: ./Main [option]\n");
    print("例:       ./Main --easy\n");
    print("オプションは合計で3つのみです。オプションは主に難易度指定として使われます。\n");
    print("=============================================================\n");
    print("--easy    初級モード。1から5の段まで出題されます。\n");
    print("--normal  中級モード。1から9の段まで出題されます。\n");
    print("--hard    上級モード。1から20の段まで出題されます。\n");
    print("=============================================================\n");
    exit();
}

function printStartMessage(string $dificculty): void {
    $dificculty = strtoupper($dificculty);
    print("==========================================================================\n");
    print("フラッシュ掛け算ゲームへようこそ！(難易度: {$dificculty}) \n");
    print("問題は合計「30問」出題されます。\n");
    print("全て解答し終わると、全て解き終わるまでにかかったタイムと正答率が出ます。\n");
    print("============================================================================\n");
    //説明を読む時間を設定
    sleep(1);
    print("5秒後に開始されます。\n");
}

function countTenSecond(): void {
    for($i = 0; $i < 5; $i++) {
        print($i+1 . "秒". "\r");
        sleep(1);
    }
}

function createProblemArray(int $first, int $last): array {
    //格納用配列宣言
    $problems = [];
    //かける数最初と最後を定数として定義
    define('MULTI_FIRST', 1);
    define('MULTI_LAST', 9);
    //掛け算問題文字列生成し配列に格納
    foreach(range($first, $last) as $index) {
        foreach(range(MULTI_FIRST, MULTI_LAST) as $index2) {
            //配列に入れる要素組み立て
            $element = $index . " * " . $index2;
            //配列に格納
            array_push($problems, $element);
        }
    }
    return $problems;
}

function getProblems(string $dificculty): array {
    //問題格納用
    $problems = [];
    //難易度に合わせて問題を変えて格納
    switch ($dificculty) {
        case 'easy':
            $problems = createProblemArray(1, 5);
            return $problems;
        case 'normal':
            $problems = createProblemArray(1, 9);
            return $problems;
        case 'hard':
            $problems = createProblemArray(1, 20);
            return $problems;

    }
}

function getOneProblem(array $problems): string {
    //ランダムにキーを取得
    $rand_key = array_rand($problems);
    //ランダムなキーから問題を取得
    $rand_problem = $problems[$rand_key];
    //返す
    return $rand_problem;
}

function checkAnswer(string $problem): bool {
    $isCorrect = false;
    //回答を数値として受け取る
    print("回答を入力してください。>> ");
    $InputAnswer = (int) trim(fgets(STDIN));
    //問題から項を配列に分ける
    $terms = explode(' ', $problem);
    //答えを計算
    $correctNumber = $terms[0] * $terms[2];
    //答えとインプットを比較
    if ($InputAnswer === $correctNumber) {
        $isCorrect = true;
        return $isCorrect;
    } else {
        return $isCorrect;
    }
}

function printMessageAboutCorrect(bool $isCorrect): void {
    if ($isCorrect) {
        print("正解！\n");
    } else {
        print("ブッブーですわ！\n");
    }
}

function countCorrectCounter(bool $isCorrect, int $correctCount): int {
    if($isCorrect) {
        //正解なら１カウントする
        $correctCount++;
        return $correctCount;
    } else {
        return $correctCount;
    }
}

function calcResult(int $correctCount, int $startTime, int $endTime): array {
    //問題出題数
    define("MAX_VALUE", 30);
    //タイム格納用
    $time = 0;
    //百分率で正解率計算 ただし小数点第二位まで
    $accuracyRate = round(($correctCount / MAX_VALUE) * 100, 2);
    //タイム計算
    $time = date("H:i:s", $endTime - $startTime);
    return ["accuracyRate" => $accuracyRate, "time" => $time];
}

function printScore(array $results): void {
    $scoreMessage=  <<<EOT
                    SCORE:
                        ACCURACY RATE: {$results["accuracyRate"]}%
                        TIME:          {$results["time"]}\n
                    EOT;
    print("============================================================\n");
    print($scoreMessage);
}

function askMorePlay(): bool {
    while(true) {
        print("もう一度プレイしますか? (y/n) >> ");
        $input = trim(fgets(STDIN));
        switch ($input) {
            case 'y':
                return true;
                break;
            case 'n':
                return false;
                break;
            default:
                print("正しい形式で入力してください。\n");
        }
    }
}

function askDifficulty(): string {
    print("次にプレイするゲームの難易度を選んでください。\n");
    print("1: EASY 2: NORMAL 3: HARD 4: HELP\n");
    while (true) {
        print(" >> ");
        $dificculty = trim(fgets(STDIN));
        switch($dificculty) {
            case '1':
                return 'easy';
                break;
            case '2':
                return 'normal';
                break;
            case '3':
                return 'hard';
                break;
            case '4':
                return 'help';
                break;
            default:
                print("無効な形式です。正しい入力をしてください。\n");
        }
    }
}

function replayGame(bool $isNextPlay): void {
    if ($isNextPlay) {
        //難易度を聞く
        $dificculty = askDifficulty();
        //区切り表示
        print("*******************************************************\n\n\n");
        system("./Main --{$dificculty}");
    } else {
        exit("じゃあね！また遊ぼう！");
    }
}

function Main(string $dificculty): void {
    //問題格納用
    $problems = [];
    //正答カウンター
    $correctCount = 0;
    //結果格納用
    $result = null;
    //タイマー開始変数
    $startTime = 0;

    //開始メッセージ
    printStartMessage($dificculty);
    //10秒カウント。
    countTenSecond();
    //難易度に合わせた問題セットを取得
    $problems = getProblems($dificculty);
    //タイマー開始
    $startTime = time();
    //30回出題する
    foreach(range(1, 30) as $index) {
        print($index . "問目: ");
        //ランダムに問題を一つ取得
        $problemForPrint = getOneProblem($problems);
        //出題
        print($problemForPrint.chr(10));
        //入力を受け取り合っているか精査 boolで返す
        $isCorrect = checkAnswer($problemForPrint);
        //正解か不正解かでメッセージを分けて出力
        printMessageAboutCorrect($isCorrect);
        //正解なら1カウントする
        $correctCount = countCorrectCounter($isCorrect, $correctCount);
    }
    //タイマー計測終了
    $endTime = time();
    //リザルト(時間と正解率)計算 連想配列で取得
    $results = calcResult($correctCount, $startTime, $endTime);
    //スコア表示
    printScore($results);
    //もう一度プレイするか聞く
    $isNextPlay = askMorePlay();
    //続けてプレイするならもう一度最初から実行させる
    replayGame($isNextPlay);
}

//難易度格納変数
$dificculty = '';
//argvが空でない時だけ実行時のオプションに合う難易度を取得
if (!array_key_exists(1, $argv)) {
    exit("必ずオプションをつけて実行してください。\n有効なオプションは「--help」オプションで参照してください\n");
} else {
    $dificculty = getDificculty($argv);
}

//help以外なら開始
switch ($dificculty) {
    case "help":
        printHelpMessage();
        break;
    default:
    //難易度を渡し開始
    Main($dificculty);
}
